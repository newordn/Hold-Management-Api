module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBon {
  count: Int!
}

type AggregateCar {
  count: Int!
}

type AggregateDotation {
  count: Int!
}

type AggregateDotationEmetteur {
  count: Int!
}

type AggregateHold {
  count: Int!
}

type AggregateHoldsOnBons {
  count: Int!
}

type AggregateLog {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Bon {
  id: ID!
  consumed: Boolean!
  coverage_when_consuming: Float!
  expiration_date: String!
  consumed_date: DateTime
  emission_date: DateTime!
  departure: String!
  destination: String!
  fuel_type: String!
  reason: String!
  number_of_liter: Float!
  initial_number_of_liter: Float!
  status: Boolean!
  user: User!
  holds(where: HoldsOnBonsWhereInput, orderBy: HoldsOnBonsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HoldsOnBons!]
  driver: String!
  code: String!
  created_at: DateTime!
}

type BonConnection {
  pageInfo: PageInfo!
  edges: [BonEdge]!
  aggregate: AggregateBon!
}

input BonCreateInput {
  id: ID
  consumed: Boolean!
  coverage_when_consuming: Float!
  expiration_date: String!
  consumed_date: DateTime
  emission_date: DateTime!
  departure: String!
  destination: String!
  fuel_type: String!
  reason: String!
  number_of_liter: Float!
  initial_number_of_liter: Float!
  status: Boolean!
  user: UserCreateOneWithoutBonsInput!
  holds: HoldsOnBonsCreateManyWithoutBonInput
  driver: String!
  code: String!
}

input BonCreateManyWithoutUserInput {
  create: [BonCreateWithoutUserInput!]
  connect: [BonWhereUniqueInput!]
}

input BonCreateOneWithoutHoldsInput {
  create: BonCreateWithoutHoldsInput
  connect: BonWhereUniqueInput
}

input BonCreateWithoutHoldsInput {
  id: ID
  consumed: Boolean!
  coverage_when_consuming: Float!
  expiration_date: String!
  consumed_date: DateTime
  emission_date: DateTime!
  departure: String!
  destination: String!
  fuel_type: String!
  reason: String!
  number_of_liter: Float!
  initial_number_of_liter: Float!
  status: Boolean!
  user: UserCreateOneWithoutBonsInput!
  driver: String!
  code: String!
}

input BonCreateWithoutUserInput {
  id: ID
  consumed: Boolean!
  coverage_when_consuming: Float!
  expiration_date: String!
  consumed_date: DateTime
  emission_date: DateTime!
  departure: String!
  destination: String!
  fuel_type: String!
  reason: String!
  number_of_liter: Float!
  initial_number_of_liter: Float!
  status: Boolean!
  holds: HoldsOnBonsCreateManyWithoutBonInput
  driver: String!
  code: String!
}

type BonEdge {
  node: Bon!
  cursor: String!
}

enum BonOrderByInput {
  id_ASC
  id_DESC
  consumed_ASC
  consumed_DESC
  coverage_when_consuming_ASC
  coverage_when_consuming_DESC
  expiration_date_ASC
  expiration_date_DESC
  consumed_date_ASC
  consumed_date_DESC
  emission_date_ASC
  emission_date_DESC
  departure_ASC
  departure_DESC
  destination_ASC
  destination_DESC
  fuel_type_ASC
  fuel_type_DESC
  reason_ASC
  reason_DESC
  number_of_liter_ASC
  number_of_liter_DESC
  initial_number_of_liter_ASC
  initial_number_of_liter_DESC
  status_ASC
  status_DESC
  driver_ASC
  driver_DESC
  code_ASC
  code_DESC
  created_at_ASC
  created_at_DESC
}

type BonPreviousValues {
  id: ID!
  consumed: Boolean!
  coverage_when_consuming: Float!
  expiration_date: String!
  consumed_date: DateTime
  emission_date: DateTime!
  departure: String!
  destination: String!
  fuel_type: String!
  reason: String!
  number_of_liter: Float!
  initial_number_of_liter: Float!
  status: Boolean!
  driver: String!
  code: String!
  created_at: DateTime!
}

input BonScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  consumed: Boolean
  consumed_not: Boolean
  coverage_when_consuming: Float
  coverage_when_consuming_not: Float
  coverage_when_consuming_in: [Float!]
  coverage_when_consuming_not_in: [Float!]
  coverage_when_consuming_lt: Float
  coverage_when_consuming_lte: Float
  coverage_when_consuming_gt: Float
  coverage_when_consuming_gte: Float
  expiration_date: String
  expiration_date_not: String
  expiration_date_in: [String!]
  expiration_date_not_in: [String!]
  expiration_date_lt: String
  expiration_date_lte: String
  expiration_date_gt: String
  expiration_date_gte: String
  expiration_date_contains: String
  expiration_date_not_contains: String
  expiration_date_starts_with: String
  expiration_date_not_starts_with: String
  expiration_date_ends_with: String
  expiration_date_not_ends_with: String
  consumed_date: DateTime
  consumed_date_not: DateTime
  consumed_date_in: [DateTime!]
  consumed_date_not_in: [DateTime!]
  consumed_date_lt: DateTime
  consumed_date_lte: DateTime
  consumed_date_gt: DateTime
  consumed_date_gte: DateTime
  emission_date: DateTime
  emission_date_not: DateTime
  emission_date_in: [DateTime!]
  emission_date_not_in: [DateTime!]
  emission_date_lt: DateTime
  emission_date_lte: DateTime
  emission_date_gt: DateTime
  emission_date_gte: DateTime
  departure: String
  departure_not: String
  departure_in: [String!]
  departure_not_in: [String!]
  departure_lt: String
  departure_lte: String
  departure_gt: String
  departure_gte: String
  departure_contains: String
  departure_not_contains: String
  departure_starts_with: String
  departure_not_starts_with: String
  departure_ends_with: String
  departure_not_ends_with: String
  destination: String
  destination_not: String
  destination_in: [String!]
  destination_not_in: [String!]
  destination_lt: String
  destination_lte: String
  destination_gt: String
  destination_gte: String
  destination_contains: String
  destination_not_contains: String
  destination_starts_with: String
  destination_not_starts_with: String
  destination_ends_with: String
  destination_not_ends_with: String
  fuel_type: String
  fuel_type_not: String
  fuel_type_in: [String!]
  fuel_type_not_in: [String!]
  fuel_type_lt: String
  fuel_type_lte: String
  fuel_type_gt: String
  fuel_type_gte: String
  fuel_type_contains: String
  fuel_type_not_contains: String
  fuel_type_starts_with: String
  fuel_type_not_starts_with: String
  fuel_type_ends_with: String
  fuel_type_not_ends_with: String
  reason: String
  reason_not: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_lt: String
  reason_lte: String
  reason_gt: String
  reason_gte: String
  reason_contains: String
  reason_not_contains: String
  reason_starts_with: String
  reason_not_starts_with: String
  reason_ends_with: String
  reason_not_ends_with: String
  number_of_liter: Float
  number_of_liter_not: Float
  number_of_liter_in: [Float!]
  number_of_liter_not_in: [Float!]
  number_of_liter_lt: Float
  number_of_liter_lte: Float
  number_of_liter_gt: Float
  number_of_liter_gte: Float
  initial_number_of_liter: Float
  initial_number_of_liter_not: Float
  initial_number_of_liter_in: [Float!]
  initial_number_of_liter_not_in: [Float!]
  initial_number_of_liter_lt: Float
  initial_number_of_liter_lte: Float
  initial_number_of_liter_gt: Float
  initial_number_of_liter_gte: Float
  status: Boolean
  status_not: Boolean
  driver: String
  driver_not: String
  driver_in: [String!]
  driver_not_in: [String!]
  driver_lt: String
  driver_lte: String
  driver_gt: String
  driver_gte: String
  driver_contains: String
  driver_not_contains: String
  driver_starts_with: String
  driver_not_starts_with: String
  driver_ends_with: String
  driver_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [BonScalarWhereInput!]
  OR: [BonScalarWhereInput!]
  NOT: [BonScalarWhereInput!]
}

type BonSubscriptionPayload {
  mutation: MutationType!
  node: Bon
  updatedFields: [String!]
  previousValues: BonPreviousValues
}

input BonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BonWhereInput
  AND: [BonSubscriptionWhereInput!]
  OR: [BonSubscriptionWhereInput!]
  NOT: [BonSubscriptionWhereInput!]
}

input BonUpdateInput {
  consumed: Boolean
  coverage_when_consuming: Float
  expiration_date: String
  consumed_date: DateTime
  emission_date: DateTime
  departure: String
  destination: String
  fuel_type: String
  reason: String
  number_of_liter: Float
  initial_number_of_liter: Float
  status: Boolean
  user: UserUpdateOneRequiredWithoutBonsInput
  holds: HoldsOnBonsUpdateManyWithoutBonInput
  driver: String
  code: String
}

input BonUpdateManyDataInput {
  consumed: Boolean
  coverage_when_consuming: Float
  expiration_date: String
  consumed_date: DateTime
  emission_date: DateTime
  departure: String
  destination: String
  fuel_type: String
  reason: String
  number_of_liter: Float
  initial_number_of_liter: Float
  status: Boolean
  driver: String
  code: String
}

input BonUpdateManyMutationInput {
  consumed: Boolean
  coverage_when_consuming: Float
  expiration_date: String
  consumed_date: DateTime
  emission_date: DateTime
  departure: String
  destination: String
  fuel_type: String
  reason: String
  number_of_liter: Float
  initial_number_of_liter: Float
  status: Boolean
  driver: String
  code: String
}

input BonUpdateManyWithoutUserInput {
  create: [BonCreateWithoutUserInput!]
  delete: [BonWhereUniqueInput!]
  connect: [BonWhereUniqueInput!]
  set: [BonWhereUniqueInput!]
  disconnect: [BonWhereUniqueInput!]
  update: [BonUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [BonUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [BonScalarWhereInput!]
  updateMany: [BonUpdateManyWithWhereNestedInput!]
}

input BonUpdateManyWithWhereNestedInput {
  where: BonScalarWhereInput!
  data: BonUpdateManyDataInput!
}

input BonUpdateOneRequiredWithoutHoldsInput {
  create: BonCreateWithoutHoldsInput
  update: BonUpdateWithoutHoldsDataInput
  upsert: BonUpsertWithoutHoldsInput
  connect: BonWhereUniqueInput
}

input BonUpdateWithoutHoldsDataInput {
  consumed: Boolean
  coverage_when_consuming: Float
  expiration_date: String
  consumed_date: DateTime
  emission_date: DateTime
  departure: String
  destination: String
  fuel_type: String
  reason: String
  number_of_liter: Float
  initial_number_of_liter: Float
  status: Boolean
  user: UserUpdateOneRequiredWithoutBonsInput
  driver: String
  code: String
}

input BonUpdateWithoutUserDataInput {
  consumed: Boolean
  coverage_when_consuming: Float
  expiration_date: String
  consumed_date: DateTime
  emission_date: DateTime
  departure: String
  destination: String
  fuel_type: String
  reason: String
  number_of_liter: Float
  initial_number_of_liter: Float
  status: Boolean
  holds: HoldsOnBonsUpdateManyWithoutBonInput
  driver: String
  code: String
}

input BonUpdateWithWhereUniqueWithoutUserInput {
  where: BonWhereUniqueInput!
  data: BonUpdateWithoutUserDataInput!
}

input BonUpsertWithoutHoldsInput {
  update: BonUpdateWithoutHoldsDataInput!
  create: BonCreateWithoutHoldsInput!
}

input BonUpsertWithWhereUniqueWithoutUserInput {
  where: BonWhereUniqueInput!
  update: BonUpdateWithoutUserDataInput!
  create: BonCreateWithoutUserInput!
}

input BonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  consumed: Boolean
  consumed_not: Boolean
  coverage_when_consuming: Float
  coverage_when_consuming_not: Float
  coverage_when_consuming_in: [Float!]
  coverage_when_consuming_not_in: [Float!]
  coverage_when_consuming_lt: Float
  coverage_when_consuming_lte: Float
  coverage_when_consuming_gt: Float
  coverage_when_consuming_gte: Float
  expiration_date: String
  expiration_date_not: String
  expiration_date_in: [String!]
  expiration_date_not_in: [String!]
  expiration_date_lt: String
  expiration_date_lte: String
  expiration_date_gt: String
  expiration_date_gte: String
  expiration_date_contains: String
  expiration_date_not_contains: String
  expiration_date_starts_with: String
  expiration_date_not_starts_with: String
  expiration_date_ends_with: String
  expiration_date_not_ends_with: String
  consumed_date: DateTime
  consumed_date_not: DateTime
  consumed_date_in: [DateTime!]
  consumed_date_not_in: [DateTime!]
  consumed_date_lt: DateTime
  consumed_date_lte: DateTime
  consumed_date_gt: DateTime
  consumed_date_gte: DateTime
  emission_date: DateTime
  emission_date_not: DateTime
  emission_date_in: [DateTime!]
  emission_date_not_in: [DateTime!]
  emission_date_lt: DateTime
  emission_date_lte: DateTime
  emission_date_gt: DateTime
  emission_date_gte: DateTime
  departure: String
  departure_not: String
  departure_in: [String!]
  departure_not_in: [String!]
  departure_lt: String
  departure_lte: String
  departure_gt: String
  departure_gte: String
  departure_contains: String
  departure_not_contains: String
  departure_starts_with: String
  departure_not_starts_with: String
  departure_ends_with: String
  departure_not_ends_with: String
  destination: String
  destination_not: String
  destination_in: [String!]
  destination_not_in: [String!]
  destination_lt: String
  destination_lte: String
  destination_gt: String
  destination_gte: String
  destination_contains: String
  destination_not_contains: String
  destination_starts_with: String
  destination_not_starts_with: String
  destination_ends_with: String
  destination_not_ends_with: String
  fuel_type: String
  fuel_type_not: String
  fuel_type_in: [String!]
  fuel_type_not_in: [String!]
  fuel_type_lt: String
  fuel_type_lte: String
  fuel_type_gt: String
  fuel_type_gte: String
  fuel_type_contains: String
  fuel_type_not_contains: String
  fuel_type_starts_with: String
  fuel_type_not_starts_with: String
  fuel_type_ends_with: String
  fuel_type_not_ends_with: String
  reason: String
  reason_not: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_lt: String
  reason_lte: String
  reason_gt: String
  reason_gte: String
  reason_contains: String
  reason_not_contains: String
  reason_starts_with: String
  reason_not_starts_with: String
  reason_ends_with: String
  reason_not_ends_with: String
  number_of_liter: Float
  number_of_liter_not: Float
  number_of_liter_in: [Float!]
  number_of_liter_not_in: [Float!]
  number_of_liter_lt: Float
  number_of_liter_lte: Float
  number_of_liter_gt: Float
  number_of_liter_gte: Float
  initial_number_of_liter: Float
  initial_number_of_liter_not: Float
  initial_number_of_liter_in: [Float!]
  initial_number_of_liter_not_in: [Float!]
  initial_number_of_liter_lt: Float
  initial_number_of_liter_lte: Float
  initial_number_of_liter_gt: Float
  initial_number_of_liter_gte: Float
  status: Boolean
  status_not: Boolean
  user: UserWhereInput
  holds_every: HoldsOnBonsWhereInput
  holds_some: HoldsOnBonsWhereInput
  holds_none: HoldsOnBonsWhereInput
  driver: String
  driver_not: String
  driver_in: [String!]
  driver_not_in: [String!]
  driver_lt: String
  driver_lte: String
  driver_gt: String
  driver_gte: String
  driver_contains: String
  driver_not_contains: String
  driver_starts_with: String
  driver_not_starts_with: String
  driver_ends_with: String
  driver_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [BonWhereInput!]
  OR: [BonWhereInput!]
  NOT: [BonWhereInput!]
}

input BonWhereUniqueInput {
  id: ID
}

type Car {
  id: ID!
  hold: Hold!
  image: String!
  marque: String!
  capacity: Float!
  type: String!
  immatriculation: String!
  kilometrage: Float!
  created_at: DateTime!
}

type CarConnection {
  pageInfo: PageInfo!
  edges: [CarEdge]!
  aggregate: AggregateCar!
}

input CarCreateInput {
  id: ID
  hold: HoldCreateOneWithoutCarsInput!
  image: String!
  marque: String!
  capacity: Float!
  type: String!
  immatriculation: String!
  kilometrage: Float!
}

input CarCreateManyWithoutHoldInput {
  create: [CarCreateWithoutHoldInput!]
  connect: [CarWhereUniqueInput!]
}

input CarCreateWithoutHoldInput {
  id: ID
  image: String!
  marque: String!
  capacity: Float!
  type: String!
  immatriculation: String!
  kilometrage: Float!
}

type CarEdge {
  node: Car!
  cursor: String!
}

enum CarOrderByInput {
  id_ASC
  id_DESC
  image_ASC
  image_DESC
  marque_ASC
  marque_DESC
  capacity_ASC
  capacity_DESC
  type_ASC
  type_DESC
  immatriculation_ASC
  immatriculation_DESC
  kilometrage_ASC
  kilometrage_DESC
  created_at_ASC
  created_at_DESC
}

type CarPreviousValues {
  id: ID!
  image: String!
  marque: String!
  capacity: Float!
  type: String!
  immatriculation: String!
  kilometrage: Float!
  created_at: DateTime!
}

input CarScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  marque: String
  marque_not: String
  marque_in: [String!]
  marque_not_in: [String!]
  marque_lt: String
  marque_lte: String
  marque_gt: String
  marque_gte: String
  marque_contains: String
  marque_not_contains: String
  marque_starts_with: String
  marque_not_starts_with: String
  marque_ends_with: String
  marque_not_ends_with: String
  capacity: Float
  capacity_not: Float
  capacity_in: [Float!]
  capacity_not_in: [Float!]
  capacity_lt: Float
  capacity_lte: Float
  capacity_gt: Float
  capacity_gte: Float
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  immatriculation: String
  immatriculation_not: String
  immatriculation_in: [String!]
  immatriculation_not_in: [String!]
  immatriculation_lt: String
  immatriculation_lte: String
  immatriculation_gt: String
  immatriculation_gte: String
  immatriculation_contains: String
  immatriculation_not_contains: String
  immatriculation_starts_with: String
  immatriculation_not_starts_with: String
  immatriculation_ends_with: String
  immatriculation_not_ends_with: String
  kilometrage: Float
  kilometrage_not: Float
  kilometrage_in: [Float!]
  kilometrage_not_in: [Float!]
  kilometrage_lt: Float
  kilometrage_lte: Float
  kilometrage_gt: Float
  kilometrage_gte: Float
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [CarScalarWhereInput!]
  OR: [CarScalarWhereInput!]
  NOT: [CarScalarWhereInput!]
}

type CarSubscriptionPayload {
  mutation: MutationType!
  node: Car
  updatedFields: [String!]
  previousValues: CarPreviousValues
}

input CarSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CarWhereInput
  AND: [CarSubscriptionWhereInput!]
  OR: [CarSubscriptionWhereInput!]
  NOT: [CarSubscriptionWhereInput!]
}

input CarUpdateInput {
  hold: HoldUpdateOneRequiredWithoutCarsInput
  image: String
  marque: String
  capacity: Float
  type: String
  immatriculation: String
  kilometrage: Float
}

input CarUpdateManyDataInput {
  image: String
  marque: String
  capacity: Float
  type: String
  immatriculation: String
  kilometrage: Float
}

input CarUpdateManyMutationInput {
  image: String
  marque: String
  capacity: Float
  type: String
  immatriculation: String
  kilometrage: Float
}

input CarUpdateManyWithoutHoldInput {
  create: [CarCreateWithoutHoldInput!]
  delete: [CarWhereUniqueInput!]
  connect: [CarWhereUniqueInput!]
  set: [CarWhereUniqueInput!]
  disconnect: [CarWhereUniqueInput!]
  update: [CarUpdateWithWhereUniqueWithoutHoldInput!]
  upsert: [CarUpsertWithWhereUniqueWithoutHoldInput!]
  deleteMany: [CarScalarWhereInput!]
  updateMany: [CarUpdateManyWithWhereNestedInput!]
}

input CarUpdateManyWithWhereNestedInput {
  where: CarScalarWhereInput!
  data: CarUpdateManyDataInput!
}

input CarUpdateWithoutHoldDataInput {
  image: String
  marque: String
  capacity: Float
  type: String
  immatriculation: String
  kilometrage: Float
}

input CarUpdateWithWhereUniqueWithoutHoldInput {
  where: CarWhereUniqueInput!
  data: CarUpdateWithoutHoldDataInput!
}

input CarUpsertWithWhereUniqueWithoutHoldInput {
  where: CarWhereUniqueInput!
  update: CarUpdateWithoutHoldDataInput!
  create: CarCreateWithoutHoldInput!
}

input CarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  hold: HoldWhereInput
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  marque: String
  marque_not: String
  marque_in: [String!]
  marque_not_in: [String!]
  marque_lt: String
  marque_lte: String
  marque_gt: String
  marque_gte: String
  marque_contains: String
  marque_not_contains: String
  marque_starts_with: String
  marque_not_starts_with: String
  marque_ends_with: String
  marque_not_ends_with: String
  capacity: Float
  capacity_not: Float
  capacity_in: [Float!]
  capacity_not_in: [Float!]
  capacity_lt: Float
  capacity_lte: Float
  capacity_gt: Float
  capacity_gte: Float
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  immatriculation: String
  immatriculation_not: String
  immatriculation_in: [String!]
  immatriculation_not_in: [String!]
  immatriculation_lt: String
  immatriculation_lte: String
  immatriculation_gt: String
  immatriculation_gte: String
  immatriculation_contains: String
  immatriculation_not_contains: String
  immatriculation_starts_with: String
  immatriculation_not_starts_with: String
  immatriculation_ends_with: String
  immatriculation_not_ends_with: String
  kilometrage: Float
  kilometrage_not: Float
  kilometrage_in: [Float!]
  kilometrage_not_in: [Float!]
  kilometrage_lt: Float
  kilometrage_lte: Float
  kilometrage_gt: Float
  kilometrage_gte: Float
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [CarWhereInput!]
  OR: [CarWhereInput!]
  NOT: [CarWhereInput!]
}

input CarWhereUniqueInput {
  id: ID
  immatriculation: String
}

scalar DateTime

type Dotation {
  id: ID!
  motif: String!
  start_date: DateTime!
  end_date: DateTime!
  number_of_liter_dotated_super: Float!
  number_of_liter_received_super: Float!
  number_of_liter_dotated_gazoil: Float!
  number_of_liter_received_gazoil: Float!
  number_of_liter_dotated_reserve_super: Float!
  number_of_liter_received_reserve_super: Float!
  number_of_liter_dotated_reserve_gazoil: Float!
  number_of_liter_received_reserve_gazoil: Float!
  user: User
  hold: Hold
  created_at: DateTime!
}

type DotationConnection {
  pageInfo: PageInfo!
  edges: [DotationEdge]!
  aggregate: AggregateDotation!
}

input DotationCreateInput {
  id: ID
  motif: String!
  start_date: DateTime!
  end_date: DateTime!
  number_of_liter_dotated_super: Float!
  number_of_liter_received_super: Float!
  number_of_liter_dotated_gazoil: Float!
  number_of_liter_received_gazoil: Float!
  number_of_liter_dotated_reserve_super: Float!
  number_of_liter_received_reserve_super: Float!
  number_of_liter_dotated_reserve_gazoil: Float!
  number_of_liter_received_reserve_gazoil: Float!
  user: UserCreateOneWithoutDotationsInput
  hold: HoldCreateOneWithoutDotationsInput
}

input DotationCreateManyWithoutHoldInput {
  create: [DotationCreateWithoutHoldInput!]
  connect: [DotationWhereUniqueInput!]
}

input DotationCreateManyWithoutUserInput {
  create: [DotationCreateWithoutUserInput!]
  connect: [DotationWhereUniqueInput!]
}

input DotationCreateWithoutHoldInput {
  id: ID
  motif: String!
  start_date: DateTime!
  end_date: DateTime!
  number_of_liter_dotated_super: Float!
  number_of_liter_received_super: Float!
  number_of_liter_dotated_gazoil: Float!
  number_of_liter_received_gazoil: Float!
  number_of_liter_dotated_reserve_super: Float!
  number_of_liter_received_reserve_super: Float!
  number_of_liter_dotated_reserve_gazoil: Float!
  number_of_liter_received_reserve_gazoil: Float!
  user: UserCreateOneWithoutDotationsInput
}

input DotationCreateWithoutUserInput {
  id: ID
  motif: String!
  start_date: DateTime!
  end_date: DateTime!
  number_of_liter_dotated_super: Float!
  number_of_liter_received_super: Float!
  number_of_liter_dotated_gazoil: Float!
  number_of_liter_received_gazoil: Float!
  number_of_liter_dotated_reserve_super: Float!
  number_of_liter_received_reserve_super: Float!
  number_of_liter_dotated_reserve_gazoil: Float!
  number_of_liter_received_reserve_gazoil: Float!
  hold: HoldCreateOneWithoutDotationsInput
}

type DotationEdge {
  node: Dotation!
  cursor: String!
}

type DotationEmetteur {
  id: ID!
  start_date: DateTime!
  end_date: DateTime!
  number_of_liter_super: Float!
  number_of_liter_gazoil: Float!
  motif: String!
  user: User!
  created_at: DateTime!
}

type DotationEmetteurConnection {
  pageInfo: PageInfo!
  edges: [DotationEmetteurEdge]!
  aggregate: AggregateDotationEmetteur!
}

input DotationEmetteurCreateInput {
  id: ID
  start_date: DateTime!
  end_date: DateTime!
  number_of_liter_super: Float!
  number_of_liter_gazoil: Float!
  motif: String!
  user: UserCreateOneWithoutDotationEmetteursInput!
}

input DotationEmetteurCreateManyWithoutUserInput {
  create: [DotationEmetteurCreateWithoutUserInput!]
  connect: [DotationEmetteurWhereUniqueInput!]
}

input DotationEmetteurCreateWithoutUserInput {
  id: ID
  start_date: DateTime!
  end_date: DateTime!
  number_of_liter_super: Float!
  number_of_liter_gazoil: Float!
  motif: String!
}

type DotationEmetteurEdge {
  node: DotationEmetteur!
  cursor: String!
}

enum DotationEmetteurOrderByInput {
  id_ASC
  id_DESC
  start_date_ASC
  start_date_DESC
  end_date_ASC
  end_date_DESC
  number_of_liter_super_ASC
  number_of_liter_super_DESC
  number_of_liter_gazoil_ASC
  number_of_liter_gazoil_DESC
  motif_ASC
  motif_DESC
  created_at_ASC
  created_at_DESC
}

type DotationEmetteurPreviousValues {
  id: ID!
  start_date: DateTime!
  end_date: DateTime!
  number_of_liter_super: Float!
  number_of_liter_gazoil: Float!
  motif: String!
  created_at: DateTime!
}

input DotationEmetteurScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  start_date: DateTime
  start_date_not: DateTime
  start_date_in: [DateTime!]
  start_date_not_in: [DateTime!]
  start_date_lt: DateTime
  start_date_lte: DateTime
  start_date_gt: DateTime
  start_date_gte: DateTime
  end_date: DateTime
  end_date_not: DateTime
  end_date_in: [DateTime!]
  end_date_not_in: [DateTime!]
  end_date_lt: DateTime
  end_date_lte: DateTime
  end_date_gt: DateTime
  end_date_gte: DateTime
  number_of_liter_super: Float
  number_of_liter_super_not: Float
  number_of_liter_super_in: [Float!]
  number_of_liter_super_not_in: [Float!]
  number_of_liter_super_lt: Float
  number_of_liter_super_lte: Float
  number_of_liter_super_gt: Float
  number_of_liter_super_gte: Float
  number_of_liter_gazoil: Float
  number_of_liter_gazoil_not: Float
  number_of_liter_gazoil_in: [Float!]
  number_of_liter_gazoil_not_in: [Float!]
  number_of_liter_gazoil_lt: Float
  number_of_liter_gazoil_lte: Float
  number_of_liter_gazoil_gt: Float
  number_of_liter_gazoil_gte: Float
  motif: String
  motif_not: String
  motif_in: [String!]
  motif_not_in: [String!]
  motif_lt: String
  motif_lte: String
  motif_gt: String
  motif_gte: String
  motif_contains: String
  motif_not_contains: String
  motif_starts_with: String
  motif_not_starts_with: String
  motif_ends_with: String
  motif_not_ends_with: String
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [DotationEmetteurScalarWhereInput!]
  OR: [DotationEmetteurScalarWhereInput!]
  NOT: [DotationEmetteurScalarWhereInput!]
}

type DotationEmetteurSubscriptionPayload {
  mutation: MutationType!
  node: DotationEmetteur
  updatedFields: [String!]
  previousValues: DotationEmetteurPreviousValues
}

input DotationEmetteurSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DotationEmetteurWhereInput
  AND: [DotationEmetteurSubscriptionWhereInput!]
  OR: [DotationEmetteurSubscriptionWhereInput!]
  NOT: [DotationEmetteurSubscriptionWhereInput!]
}

input DotationEmetteurUpdateInput {
  start_date: DateTime
  end_date: DateTime
  number_of_liter_super: Float
  number_of_liter_gazoil: Float
  motif: String
  user: UserUpdateOneRequiredWithoutDotationEmetteursInput
}

input DotationEmetteurUpdateManyDataInput {
  start_date: DateTime
  end_date: DateTime
  number_of_liter_super: Float
  number_of_liter_gazoil: Float
  motif: String
}

input DotationEmetteurUpdateManyMutationInput {
  start_date: DateTime
  end_date: DateTime
  number_of_liter_super: Float
  number_of_liter_gazoil: Float
  motif: String
}

input DotationEmetteurUpdateManyWithoutUserInput {
  create: [DotationEmetteurCreateWithoutUserInput!]
  delete: [DotationEmetteurWhereUniqueInput!]
  connect: [DotationEmetteurWhereUniqueInput!]
  set: [DotationEmetteurWhereUniqueInput!]
  disconnect: [DotationEmetteurWhereUniqueInput!]
  update: [DotationEmetteurUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [DotationEmetteurUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [DotationEmetteurScalarWhereInput!]
  updateMany: [DotationEmetteurUpdateManyWithWhereNestedInput!]
}

input DotationEmetteurUpdateManyWithWhereNestedInput {
  where: DotationEmetteurScalarWhereInput!
  data: DotationEmetteurUpdateManyDataInput!
}

input DotationEmetteurUpdateWithoutUserDataInput {
  start_date: DateTime
  end_date: DateTime
  number_of_liter_super: Float
  number_of_liter_gazoil: Float
  motif: String
}

input DotationEmetteurUpdateWithWhereUniqueWithoutUserInput {
  where: DotationEmetteurWhereUniqueInput!
  data: DotationEmetteurUpdateWithoutUserDataInput!
}

input DotationEmetteurUpsertWithWhereUniqueWithoutUserInput {
  where: DotationEmetteurWhereUniqueInput!
  update: DotationEmetteurUpdateWithoutUserDataInput!
  create: DotationEmetteurCreateWithoutUserInput!
}

input DotationEmetteurWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  start_date: DateTime
  start_date_not: DateTime
  start_date_in: [DateTime!]
  start_date_not_in: [DateTime!]
  start_date_lt: DateTime
  start_date_lte: DateTime
  start_date_gt: DateTime
  start_date_gte: DateTime
  end_date: DateTime
  end_date_not: DateTime
  end_date_in: [DateTime!]
  end_date_not_in: [DateTime!]
  end_date_lt: DateTime
  end_date_lte: DateTime
  end_date_gt: DateTime
  end_date_gte: DateTime
  number_of_liter_super: Float
  number_of_liter_super_not: Float
  number_of_liter_super_in: [Float!]
  number_of_liter_super_not_in: [Float!]
  number_of_liter_super_lt: Float
  number_of_liter_super_lte: Float
  number_of_liter_super_gt: Float
  number_of_liter_super_gte: Float
  number_of_liter_gazoil: Float
  number_of_liter_gazoil_not: Float
  number_of_liter_gazoil_in: [Float!]
  number_of_liter_gazoil_not_in: [Float!]
  number_of_liter_gazoil_lt: Float
  number_of_liter_gazoil_lte: Float
  number_of_liter_gazoil_gt: Float
  number_of_liter_gazoil_gte: Float
  motif: String
  motif_not: String
  motif_in: [String!]
  motif_not_in: [String!]
  motif_lt: String
  motif_lte: String
  motif_gt: String
  motif_gte: String
  motif_contains: String
  motif_not_contains: String
  motif_starts_with: String
  motif_not_starts_with: String
  motif_ends_with: String
  motif_not_ends_with: String
  user: UserWhereInput
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [DotationEmetteurWhereInput!]
  OR: [DotationEmetteurWhereInput!]
  NOT: [DotationEmetteurWhereInput!]
}

input DotationEmetteurWhereUniqueInput {
  id: ID
}

enum DotationOrderByInput {
  id_ASC
  id_DESC
  motif_ASC
  motif_DESC
  start_date_ASC
  start_date_DESC
  end_date_ASC
  end_date_DESC
  number_of_liter_dotated_super_ASC
  number_of_liter_dotated_super_DESC
  number_of_liter_received_super_ASC
  number_of_liter_received_super_DESC
  number_of_liter_dotated_gazoil_ASC
  number_of_liter_dotated_gazoil_DESC
  number_of_liter_received_gazoil_ASC
  number_of_liter_received_gazoil_DESC
  number_of_liter_dotated_reserve_super_ASC
  number_of_liter_dotated_reserve_super_DESC
  number_of_liter_received_reserve_super_ASC
  number_of_liter_received_reserve_super_DESC
  number_of_liter_dotated_reserve_gazoil_ASC
  number_of_liter_dotated_reserve_gazoil_DESC
  number_of_liter_received_reserve_gazoil_ASC
  number_of_liter_received_reserve_gazoil_DESC
  created_at_ASC
  created_at_DESC
}

type DotationPreviousValues {
  id: ID!
  motif: String!
  start_date: DateTime!
  end_date: DateTime!
  number_of_liter_dotated_super: Float!
  number_of_liter_received_super: Float!
  number_of_liter_dotated_gazoil: Float!
  number_of_liter_received_gazoil: Float!
  number_of_liter_dotated_reserve_super: Float!
  number_of_liter_received_reserve_super: Float!
  number_of_liter_dotated_reserve_gazoil: Float!
  number_of_liter_received_reserve_gazoil: Float!
  created_at: DateTime!
}

input DotationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  motif: String
  motif_not: String
  motif_in: [String!]
  motif_not_in: [String!]
  motif_lt: String
  motif_lte: String
  motif_gt: String
  motif_gte: String
  motif_contains: String
  motif_not_contains: String
  motif_starts_with: String
  motif_not_starts_with: String
  motif_ends_with: String
  motif_not_ends_with: String
  start_date: DateTime
  start_date_not: DateTime
  start_date_in: [DateTime!]
  start_date_not_in: [DateTime!]
  start_date_lt: DateTime
  start_date_lte: DateTime
  start_date_gt: DateTime
  start_date_gte: DateTime
  end_date: DateTime
  end_date_not: DateTime
  end_date_in: [DateTime!]
  end_date_not_in: [DateTime!]
  end_date_lt: DateTime
  end_date_lte: DateTime
  end_date_gt: DateTime
  end_date_gte: DateTime
  number_of_liter_dotated_super: Float
  number_of_liter_dotated_super_not: Float
  number_of_liter_dotated_super_in: [Float!]
  number_of_liter_dotated_super_not_in: [Float!]
  number_of_liter_dotated_super_lt: Float
  number_of_liter_dotated_super_lte: Float
  number_of_liter_dotated_super_gt: Float
  number_of_liter_dotated_super_gte: Float
  number_of_liter_received_super: Float
  number_of_liter_received_super_not: Float
  number_of_liter_received_super_in: [Float!]
  number_of_liter_received_super_not_in: [Float!]
  number_of_liter_received_super_lt: Float
  number_of_liter_received_super_lte: Float
  number_of_liter_received_super_gt: Float
  number_of_liter_received_super_gte: Float
  number_of_liter_dotated_gazoil: Float
  number_of_liter_dotated_gazoil_not: Float
  number_of_liter_dotated_gazoil_in: [Float!]
  number_of_liter_dotated_gazoil_not_in: [Float!]
  number_of_liter_dotated_gazoil_lt: Float
  number_of_liter_dotated_gazoil_lte: Float
  number_of_liter_dotated_gazoil_gt: Float
  number_of_liter_dotated_gazoil_gte: Float
  number_of_liter_received_gazoil: Float
  number_of_liter_received_gazoil_not: Float
  number_of_liter_received_gazoil_in: [Float!]
  number_of_liter_received_gazoil_not_in: [Float!]
  number_of_liter_received_gazoil_lt: Float
  number_of_liter_received_gazoil_lte: Float
  number_of_liter_received_gazoil_gt: Float
  number_of_liter_received_gazoil_gte: Float
  number_of_liter_dotated_reserve_super: Float
  number_of_liter_dotated_reserve_super_not: Float
  number_of_liter_dotated_reserve_super_in: [Float!]
  number_of_liter_dotated_reserve_super_not_in: [Float!]
  number_of_liter_dotated_reserve_super_lt: Float
  number_of_liter_dotated_reserve_super_lte: Float
  number_of_liter_dotated_reserve_super_gt: Float
  number_of_liter_dotated_reserve_super_gte: Float
  number_of_liter_received_reserve_super: Float
  number_of_liter_received_reserve_super_not: Float
  number_of_liter_received_reserve_super_in: [Float!]
  number_of_liter_received_reserve_super_not_in: [Float!]
  number_of_liter_received_reserve_super_lt: Float
  number_of_liter_received_reserve_super_lte: Float
  number_of_liter_received_reserve_super_gt: Float
  number_of_liter_received_reserve_super_gte: Float
  number_of_liter_dotated_reserve_gazoil: Float
  number_of_liter_dotated_reserve_gazoil_not: Float
  number_of_liter_dotated_reserve_gazoil_in: [Float!]
  number_of_liter_dotated_reserve_gazoil_not_in: [Float!]
  number_of_liter_dotated_reserve_gazoil_lt: Float
  number_of_liter_dotated_reserve_gazoil_lte: Float
  number_of_liter_dotated_reserve_gazoil_gt: Float
  number_of_liter_dotated_reserve_gazoil_gte: Float
  number_of_liter_received_reserve_gazoil: Float
  number_of_liter_received_reserve_gazoil_not: Float
  number_of_liter_received_reserve_gazoil_in: [Float!]
  number_of_liter_received_reserve_gazoil_not_in: [Float!]
  number_of_liter_received_reserve_gazoil_lt: Float
  number_of_liter_received_reserve_gazoil_lte: Float
  number_of_liter_received_reserve_gazoil_gt: Float
  number_of_liter_received_reserve_gazoil_gte: Float
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [DotationScalarWhereInput!]
  OR: [DotationScalarWhereInput!]
  NOT: [DotationScalarWhereInput!]
}

type DotationSubscriptionPayload {
  mutation: MutationType!
  node: Dotation
  updatedFields: [String!]
  previousValues: DotationPreviousValues
}

input DotationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DotationWhereInput
  AND: [DotationSubscriptionWhereInput!]
  OR: [DotationSubscriptionWhereInput!]
  NOT: [DotationSubscriptionWhereInput!]
}

input DotationUpdateInput {
  motif: String
  start_date: DateTime
  end_date: DateTime
  number_of_liter_dotated_super: Float
  number_of_liter_received_super: Float
  number_of_liter_dotated_gazoil: Float
  number_of_liter_received_gazoil: Float
  number_of_liter_dotated_reserve_super: Float
  number_of_liter_received_reserve_super: Float
  number_of_liter_dotated_reserve_gazoil: Float
  number_of_liter_received_reserve_gazoil: Float
  user: UserUpdateOneWithoutDotationsInput
  hold: HoldUpdateOneWithoutDotationsInput
}

input DotationUpdateManyDataInput {
  motif: String
  start_date: DateTime
  end_date: DateTime
  number_of_liter_dotated_super: Float
  number_of_liter_received_super: Float
  number_of_liter_dotated_gazoil: Float
  number_of_liter_received_gazoil: Float
  number_of_liter_dotated_reserve_super: Float
  number_of_liter_received_reserve_super: Float
  number_of_liter_dotated_reserve_gazoil: Float
  number_of_liter_received_reserve_gazoil: Float
}

input DotationUpdateManyMutationInput {
  motif: String
  start_date: DateTime
  end_date: DateTime
  number_of_liter_dotated_super: Float
  number_of_liter_received_super: Float
  number_of_liter_dotated_gazoil: Float
  number_of_liter_received_gazoil: Float
  number_of_liter_dotated_reserve_super: Float
  number_of_liter_received_reserve_super: Float
  number_of_liter_dotated_reserve_gazoil: Float
  number_of_liter_received_reserve_gazoil: Float
}

input DotationUpdateManyWithoutHoldInput {
  create: [DotationCreateWithoutHoldInput!]
  delete: [DotationWhereUniqueInput!]
  connect: [DotationWhereUniqueInput!]
  set: [DotationWhereUniqueInput!]
  disconnect: [DotationWhereUniqueInput!]
  update: [DotationUpdateWithWhereUniqueWithoutHoldInput!]
  upsert: [DotationUpsertWithWhereUniqueWithoutHoldInput!]
  deleteMany: [DotationScalarWhereInput!]
  updateMany: [DotationUpdateManyWithWhereNestedInput!]
}

input DotationUpdateManyWithoutUserInput {
  create: [DotationCreateWithoutUserInput!]
  delete: [DotationWhereUniqueInput!]
  connect: [DotationWhereUniqueInput!]
  set: [DotationWhereUniqueInput!]
  disconnect: [DotationWhereUniqueInput!]
  update: [DotationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [DotationUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [DotationScalarWhereInput!]
  updateMany: [DotationUpdateManyWithWhereNestedInput!]
}

input DotationUpdateManyWithWhereNestedInput {
  where: DotationScalarWhereInput!
  data: DotationUpdateManyDataInput!
}

input DotationUpdateWithoutHoldDataInput {
  motif: String
  start_date: DateTime
  end_date: DateTime
  number_of_liter_dotated_super: Float
  number_of_liter_received_super: Float
  number_of_liter_dotated_gazoil: Float
  number_of_liter_received_gazoil: Float
  number_of_liter_dotated_reserve_super: Float
  number_of_liter_received_reserve_super: Float
  number_of_liter_dotated_reserve_gazoil: Float
  number_of_liter_received_reserve_gazoil: Float
  user: UserUpdateOneWithoutDotationsInput
}

input DotationUpdateWithoutUserDataInput {
  motif: String
  start_date: DateTime
  end_date: DateTime
  number_of_liter_dotated_super: Float
  number_of_liter_received_super: Float
  number_of_liter_dotated_gazoil: Float
  number_of_liter_received_gazoil: Float
  number_of_liter_dotated_reserve_super: Float
  number_of_liter_received_reserve_super: Float
  number_of_liter_dotated_reserve_gazoil: Float
  number_of_liter_received_reserve_gazoil: Float
  hold: HoldUpdateOneWithoutDotationsInput
}

input DotationUpdateWithWhereUniqueWithoutHoldInput {
  where: DotationWhereUniqueInput!
  data: DotationUpdateWithoutHoldDataInput!
}

input DotationUpdateWithWhereUniqueWithoutUserInput {
  where: DotationWhereUniqueInput!
  data: DotationUpdateWithoutUserDataInput!
}

input DotationUpsertWithWhereUniqueWithoutHoldInput {
  where: DotationWhereUniqueInput!
  update: DotationUpdateWithoutHoldDataInput!
  create: DotationCreateWithoutHoldInput!
}

input DotationUpsertWithWhereUniqueWithoutUserInput {
  where: DotationWhereUniqueInput!
  update: DotationUpdateWithoutUserDataInput!
  create: DotationCreateWithoutUserInput!
}

input DotationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  motif: String
  motif_not: String
  motif_in: [String!]
  motif_not_in: [String!]
  motif_lt: String
  motif_lte: String
  motif_gt: String
  motif_gte: String
  motif_contains: String
  motif_not_contains: String
  motif_starts_with: String
  motif_not_starts_with: String
  motif_ends_with: String
  motif_not_ends_with: String
  start_date: DateTime
  start_date_not: DateTime
  start_date_in: [DateTime!]
  start_date_not_in: [DateTime!]
  start_date_lt: DateTime
  start_date_lte: DateTime
  start_date_gt: DateTime
  start_date_gte: DateTime
  end_date: DateTime
  end_date_not: DateTime
  end_date_in: [DateTime!]
  end_date_not_in: [DateTime!]
  end_date_lt: DateTime
  end_date_lte: DateTime
  end_date_gt: DateTime
  end_date_gte: DateTime
  number_of_liter_dotated_super: Float
  number_of_liter_dotated_super_not: Float
  number_of_liter_dotated_super_in: [Float!]
  number_of_liter_dotated_super_not_in: [Float!]
  number_of_liter_dotated_super_lt: Float
  number_of_liter_dotated_super_lte: Float
  number_of_liter_dotated_super_gt: Float
  number_of_liter_dotated_super_gte: Float
  number_of_liter_received_super: Float
  number_of_liter_received_super_not: Float
  number_of_liter_received_super_in: [Float!]
  number_of_liter_received_super_not_in: [Float!]
  number_of_liter_received_super_lt: Float
  number_of_liter_received_super_lte: Float
  number_of_liter_received_super_gt: Float
  number_of_liter_received_super_gte: Float
  number_of_liter_dotated_gazoil: Float
  number_of_liter_dotated_gazoil_not: Float
  number_of_liter_dotated_gazoil_in: [Float!]
  number_of_liter_dotated_gazoil_not_in: [Float!]
  number_of_liter_dotated_gazoil_lt: Float
  number_of_liter_dotated_gazoil_lte: Float
  number_of_liter_dotated_gazoil_gt: Float
  number_of_liter_dotated_gazoil_gte: Float
  number_of_liter_received_gazoil: Float
  number_of_liter_received_gazoil_not: Float
  number_of_liter_received_gazoil_in: [Float!]
  number_of_liter_received_gazoil_not_in: [Float!]
  number_of_liter_received_gazoil_lt: Float
  number_of_liter_received_gazoil_lte: Float
  number_of_liter_received_gazoil_gt: Float
  number_of_liter_received_gazoil_gte: Float
  number_of_liter_dotated_reserve_super: Float
  number_of_liter_dotated_reserve_super_not: Float
  number_of_liter_dotated_reserve_super_in: [Float!]
  number_of_liter_dotated_reserve_super_not_in: [Float!]
  number_of_liter_dotated_reserve_super_lt: Float
  number_of_liter_dotated_reserve_super_lte: Float
  number_of_liter_dotated_reserve_super_gt: Float
  number_of_liter_dotated_reserve_super_gte: Float
  number_of_liter_received_reserve_super: Float
  number_of_liter_received_reserve_super_not: Float
  number_of_liter_received_reserve_super_in: [Float!]
  number_of_liter_received_reserve_super_not_in: [Float!]
  number_of_liter_received_reserve_super_lt: Float
  number_of_liter_received_reserve_super_lte: Float
  number_of_liter_received_reserve_super_gt: Float
  number_of_liter_received_reserve_super_gte: Float
  number_of_liter_dotated_reserve_gazoil: Float
  number_of_liter_dotated_reserve_gazoil_not: Float
  number_of_liter_dotated_reserve_gazoil_in: [Float!]
  number_of_liter_dotated_reserve_gazoil_not_in: [Float!]
  number_of_liter_dotated_reserve_gazoil_lt: Float
  number_of_liter_dotated_reserve_gazoil_lte: Float
  number_of_liter_dotated_reserve_gazoil_gt: Float
  number_of_liter_dotated_reserve_gazoil_gte: Float
  number_of_liter_received_reserve_gazoil: Float
  number_of_liter_received_reserve_gazoil_not: Float
  number_of_liter_received_reserve_gazoil_in: [Float!]
  number_of_liter_received_reserve_gazoil_not_in: [Float!]
  number_of_liter_received_reserve_gazoil_lt: Float
  number_of_liter_received_reserve_gazoil_lte: Float
  number_of_liter_received_reserve_gazoil_gt: Float
  number_of_liter_received_reserve_gazoil_gte: Float
  user: UserWhereInput
  hold: HoldWhereInput
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [DotationWhereInput!]
  OR: [DotationWhereInput!]
  NOT: [DotationWhereInput!]
}

input DotationWhereUniqueInput {
  id: ID
}

type Hold {
  id: ID!
  name: String!
  localisation: String!
  super_capacity: Float!
  gazoil_capacity: Float!
  super_quantity: Float!
  gazoil_quantity: Float!
  theorical_super_quantity: Float!
  theorical_gazoil_quantity: Float!
  reserve_super_quantity: Float!
  reserve_gazoil_quantity: Float!
  theorical_reserve_super_quantity: Float!
  theorical_reserve_gazoil_quantity: Float!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  bons(where: HoldsOnBonsWhereInput, orderBy: HoldsOnBonsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HoldsOnBons!]
  cars(where: CarWhereInput, orderBy: CarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Car!]
  dotations(where: DotationWhereInput, orderBy: DotationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dotation!]
  created_at: DateTime!
}

type HoldConnection {
  pageInfo: PageInfo!
  edges: [HoldEdge]!
  aggregate: AggregateHold!
}

input HoldCreateInput {
  id: ID
  name: String!
  localisation: String!
  super_capacity: Float!
  gazoil_capacity: Float!
  super_quantity: Float!
  gazoil_quantity: Float!
  theorical_super_quantity: Float!
  theorical_gazoil_quantity: Float!
  reserve_super_quantity: Float!
  reserve_gazoil_quantity: Float!
  theorical_reserve_super_quantity: Float!
  theorical_reserve_gazoil_quantity: Float!
  users: UserCreateManyWithoutHoldInput
  bons: HoldsOnBonsCreateManyWithoutHoldInput
  cars: CarCreateManyWithoutHoldInput
  dotations: DotationCreateManyWithoutHoldInput
}

input HoldCreateOneWithoutBonsInput {
  create: HoldCreateWithoutBonsInput
  connect: HoldWhereUniqueInput
}

input HoldCreateOneWithoutCarsInput {
  create: HoldCreateWithoutCarsInput
  connect: HoldWhereUniqueInput
}

input HoldCreateOneWithoutDotationsInput {
  create: HoldCreateWithoutDotationsInput
  connect: HoldWhereUniqueInput
}

input HoldCreateOneWithoutUsersInput {
  create: HoldCreateWithoutUsersInput
  connect: HoldWhereUniqueInput
}

input HoldCreateWithoutBonsInput {
  id: ID
  name: String!
  localisation: String!
  super_capacity: Float!
  gazoil_capacity: Float!
  super_quantity: Float!
  gazoil_quantity: Float!
  theorical_super_quantity: Float!
  theorical_gazoil_quantity: Float!
  reserve_super_quantity: Float!
  reserve_gazoil_quantity: Float!
  theorical_reserve_super_quantity: Float!
  theorical_reserve_gazoil_quantity: Float!
  users: UserCreateManyWithoutHoldInput
  cars: CarCreateManyWithoutHoldInput
  dotations: DotationCreateManyWithoutHoldInput
}

input HoldCreateWithoutCarsInput {
  id: ID
  name: String!
  localisation: String!
  super_capacity: Float!
  gazoil_capacity: Float!
  super_quantity: Float!
  gazoil_quantity: Float!
  theorical_super_quantity: Float!
  theorical_gazoil_quantity: Float!
  reserve_super_quantity: Float!
  reserve_gazoil_quantity: Float!
  theorical_reserve_super_quantity: Float!
  theorical_reserve_gazoil_quantity: Float!
  users: UserCreateManyWithoutHoldInput
  bons: HoldsOnBonsCreateManyWithoutHoldInput
  dotations: DotationCreateManyWithoutHoldInput
}

input HoldCreateWithoutDotationsInput {
  id: ID
  name: String!
  localisation: String!
  super_capacity: Float!
  gazoil_capacity: Float!
  super_quantity: Float!
  gazoil_quantity: Float!
  theorical_super_quantity: Float!
  theorical_gazoil_quantity: Float!
  reserve_super_quantity: Float!
  reserve_gazoil_quantity: Float!
  theorical_reserve_super_quantity: Float!
  theorical_reserve_gazoil_quantity: Float!
  users: UserCreateManyWithoutHoldInput
  bons: HoldsOnBonsCreateManyWithoutHoldInput
  cars: CarCreateManyWithoutHoldInput
}

input HoldCreateWithoutUsersInput {
  id: ID
  name: String!
  localisation: String!
  super_capacity: Float!
  gazoil_capacity: Float!
  super_quantity: Float!
  gazoil_quantity: Float!
  theorical_super_quantity: Float!
  theorical_gazoil_quantity: Float!
  reserve_super_quantity: Float!
  reserve_gazoil_quantity: Float!
  theorical_reserve_super_quantity: Float!
  theorical_reserve_gazoil_quantity: Float!
  bons: HoldsOnBonsCreateManyWithoutHoldInput
  cars: CarCreateManyWithoutHoldInput
  dotations: DotationCreateManyWithoutHoldInput
}

type HoldEdge {
  node: Hold!
  cursor: String!
}

enum HoldOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  localisation_ASC
  localisation_DESC
  super_capacity_ASC
  super_capacity_DESC
  gazoil_capacity_ASC
  gazoil_capacity_DESC
  super_quantity_ASC
  super_quantity_DESC
  gazoil_quantity_ASC
  gazoil_quantity_DESC
  theorical_super_quantity_ASC
  theorical_super_quantity_DESC
  theorical_gazoil_quantity_ASC
  theorical_gazoil_quantity_DESC
  reserve_super_quantity_ASC
  reserve_super_quantity_DESC
  reserve_gazoil_quantity_ASC
  reserve_gazoil_quantity_DESC
  theorical_reserve_super_quantity_ASC
  theorical_reserve_super_quantity_DESC
  theorical_reserve_gazoil_quantity_ASC
  theorical_reserve_gazoil_quantity_DESC
  created_at_ASC
  created_at_DESC
}

type HoldPreviousValues {
  id: ID!
  name: String!
  localisation: String!
  super_capacity: Float!
  gazoil_capacity: Float!
  super_quantity: Float!
  gazoil_quantity: Float!
  theorical_super_quantity: Float!
  theorical_gazoil_quantity: Float!
  reserve_super_quantity: Float!
  reserve_gazoil_quantity: Float!
  theorical_reserve_super_quantity: Float!
  theorical_reserve_gazoil_quantity: Float!
  created_at: DateTime!
}

type HoldsOnBons {
  id: ID!
  hold: Hold!
  bon: Bon!
  created_at: DateTime!
}

type HoldsOnBonsConnection {
  pageInfo: PageInfo!
  edges: [HoldsOnBonsEdge]!
  aggregate: AggregateHoldsOnBons!
}

input HoldsOnBonsCreateInput {
  id: ID
  hold: HoldCreateOneWithoutBonsInput!
  bon: BonCreateOneWithoutHoldsInput!
}

input HoldsOnBonsCreateManyWithoutBonInput {
  create: [HoldsOnBonsCreateWithoutBonInput!]
  connect: [HoldsOnBonsWhereUniqueInput!]
}

input HoldsOnBonsCreateManyWithoutHoldInput {
  create: [HoldsOnBonsCreateWithoutHoldInput!]
  connect: [HoldsOnBonsWhereUniqueInput!]
}

input HoldsOnBonsCreateWithoutBonInput {
  id: ID
  hold: HoldCreateOneWithoutBonsInput!
}

input HoldsOnBonsCreateWithoutHoldInput {
  id: ID
  bon: BonCreateOneWithoutHoldsInput!
}

type HoldsOnBonsEdge {
  node: HoldsOnBons!
  cursor: String!
}

enum HoldsOnBonsOrderByInput {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
}

type HoldsOnBonsPreviousValues {
  id: ID!
  created_at: DateTime!
}

input HoldsOnBonsScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [HoldsOnBonsScalarWhereInput!]
  OR: [HoldsOnBonsScalarWhereInput!]
  NOT: [HoldsOnBonsScalarWhereInput!]
}

type HoldsOnBonsSubscriptionPayload {
  mutation: MutationType!
  node: HoldsOnBons
  updatedFields: [String!]
  previousValues: HoldsOnBonsPreviousValues
}

input HoldsOnBonsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HoldsOnBonsWhereInput
  AND: [HoldsOnBonsSubscriptionWhereInput!]
  OR: [HoldsOnBonsSubscriptionWhereInput!]
  NOT: [HoldsOnBonsSubscriptionWhereInput!]
}

input HoldsOnBonsUpdateInput {
  hold: HoldUpdateOneRequiredWithoutBonsInput
  bon: BonUpdateOneRequiredWithoutHoldsInput
}

input HoldsOnBonsUpdateManyWithoutBonInput {
  create: [HoldsOnBonsCreateWithoutBonInput!]
  delete: [HoldsOnBonsWhereUniqueInput!]
  connect: [HoldsOnBonsWhereUniqueInput!]
  set: [HoldsOnBonsWhereUniqueInput!]
  disconnect: [HoldsOnBonsWhereUniqueInput!]
  update: [HoldsOnBonsUpdateWithWhereUniqueWithoutBonInput!]
  upsert: [HoldsOnBonsUpsertWithWhereUniqueWithoutBonInput!]
  deleteMany: [HoldsOnBonsScalarWhereInput!]
}

input HoldsOnBonsUpdateManyWithoutHoldInput {
  create: [HoldsOnBonsCreateWithoutHoldInput!]
  delete: [HoldsOnBonsWhereUniqueInput!]
  connect: [HoldsOnBonsWhereUniqueInput!]
  set: [HoldsOnBonsWhereUniqueInput!]
  disconnect: [HoldsOnBonsWhereUniqueInput!]
  update: [HoldsOnBonsUpdateWithWhereUniqueWithoutHoldInput!]
  upsert: [HoldsOnBonsUpsertWithWhereUniqueWithoutHoldInput!]
  deleteMany: [HoldsOnBonsScalarWhereInput!]
}

input HoldsOnBonsUpdateWithoutBonDataInput {
  hold: HoldUpdateOneRequiredWithoutBonsInput
}

input HoldsOnBonsUpdateWithoutHoldDataInput {
  bon: BonUpdateOneRequiredWithoutHoldsInput
}

input HoldsOnBonsUpdateWithWhereUniqueWithoutBonInput {
  where: HoldsOnBonsWhereUniqueInput!
  data: HoldsOnBonsUpdateWithoutBonDataInput!
}

input HoldsOnBonsUpdateWithWhereUniqueWithoutHoldInput {
  where: HoldsOnBonsWhereUniqueInput!
  data: HoldsOnBonsUpdateWithoutHoldDataInput!
}

input HoldsOnBonsUpsertWithWhereUniqueWithoutBonInput {
  where: HoldsOnBonsWhereUniqueInput!
  update: HoldsOnBonsUpdateWithoutBonDataInput!
  create: HoldsOnBonsCreateWithoutBonInput!
}

input HoldsOnBonsUpsertWithWhereUniqueWithoutHoldInput {
  where: HoldsOnBonsWhereUniqueInput!
  update: HoldsOnBonsUpdateWithoutHoldDataInput!
  create: HoldsOnBonsCreateWithoutHoldInput!
}

input HoldsOnBonsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  hold: HoldWhereInput
  bon: BonWhereInput
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [HoldsOnBonsWhereInput!]
  OR: [HoldsOnBonsWhereInput!]
  NOT: [HoldsOnBonsWhereInput!]
}

input HoldsOnBonsWhereUniqueInput {
  id: ID
}

type HoldSubscriptionPayload {
  mutation: MutationType!
  node: Hold
  updatedFields: [String!]
  previousValues: HoldPreviousValues
}

input HoldSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HoldWhereInput
  AND: [HoldSubscriptionWhereInput!]
  OR: [HoldSubscriptionWhereInput!]
  NOT: [HoldSubscriptionWhereInput!]
}

input HoldUpdateInput {
  name: String
  localisation: String
  super_capacity: Float
  gazoil_capacity: Float
  super_quantity: Float
  gazoil_quantity: Float
  theorical_super_quantity: Float
  theorical_gazoil_quantity: Float
  reserve_super_quantity: Float
  reserve_gazoil_quantity: Float
  theorical_reserve_super_quantity: Float
  theorical_reserve_gazoil_quantity: Float
  users: UserUpdateManyWithoutHoldInput
  bons: HoldsOnBonsUpdateManyWithoutHoldInput
  cars: CarUpdateManyWithoutHoldInput
  dotations: DotationUpdateManyWithoutHoldInput
}

input HoldUpdateManyMutationInput {
  name: String
  localisation: String
  super_capacity: Float
  gazoil_capacity: Float
  super_quantity: Float
  gazoil_quantity: Float
  theorical_super_quantity: Float
  theorical_gazoil_quantity: Float
  reserve_super_quantity: Float
  reserve_gazoil_quantity: Float
  theorical_reserve_super_quantity: Float
  theorical_reserve_gazoil_quantity: Float
}

input HoldUpdateOneRequiredWithoutBonsInput {
  create: HoldCreateWithoutBonsInput
  update: HoldUpdateWithoutBonsDataInput
  upsert: HoldUpsertWithoutBonsInput
  connect: HoldWhereUniqueInput
}

input HoldUpdateOneRequiredWithoutCarsInput {
  create: HoldCreateWithoutCarsInput
  update: HoldUpdateWithoutCarsDataInput
  upsert: HoldUpsertWithoutCarsInput
  connect: HoldWhereUniqueInput
}

input HoldUpdateOneWithoutDotationsInput {
  create: HoldCreateWithoutDotationsInput
  update: HoldUpdateWithoutDotationsDataInput
  upsert: HoldUpsertWithoutDotationsInput
  delete: Boolean
  disconnect: Boolean
  connect: HoldWhereUniqueInput
}

input HoldUpdateOneWithoutUsersInput {
  create: HoldCreateWithoutUsersInput
  update: HoldUpdateWithoutUsersDataInput
  upsert: HoldUpsertWithoutUsersInput
  delete: Boolean
  disconnect: Boolean
  connect: HoldWhereUniqueInput
}

input HoldUpdateWithoutBonsDataInput {
  name: String
  localisation: String
  super_capacity: Float
  gazoil_capacity: Float
  super_quantity: Float
  gazoil_quantity: Float
  theorical_super_quantity: Float
  theorical_gazoil_quantity: Float
  reserve_super_quantity: Float
  reserve_gazoil_quantity: Float
  theorical_reserve_super_quantity: Float
  theorical_reserve_gazoil_quantity: Float
  users: UserUpdateManyWithoutHoldInput
  cars: CarUpdateManyWithoutHoldInput
  dotations: DotationUpdateManyWithoutHoldInput
}

input HoldUpdateWithoutCarsDataInput {
  name: String
  localisation: String
  super_capacity: Float
  gazoil_capacity: Float
  super_quantity: Float
  gazoil_quantity: Float
  theorical_super_quantity: Float
  theorical_gazoil_quantity: Float
  reserve_super_quantity: Float
  reserve_gazoil_quantity: Float
  theorical_reserve_super_quantity: Float
  theorical_reserve_gazoil_quantity: Float
  users: UserUpdateManyWithoutHoldInput
  bons: HoldsOnBonsUpdateManyWithoutHoldInput
  dotations: DotationUpdateManyWithoutHoldInput
}

input HoldUpdateWithoutDotationsDataInput {
  name: String
  localisation: String
  super_capacity: Float
  gazoil_capacity: Float
  super_quantity: Float
  gazoil_quantity: Float
  theorical_super_quantity: Float
  theorical_gazoil_quantity: Float
  reserve_super_quantity: Float
  reserve_gazoil_quantity: Float
  theorical_reserve_super_quantity: Float
  theorical_reserve_gazoil_quantity: Float
  users: UserUpdateManyWithoutHoldInput
  bons: HoldsOnBonsUpdateManyWithoutHoldInput
  cars: CarUpdateManyWithoutHoldInput
}

input HoldUpdateWithoutUsersDataInput {
  name: String
  localisation: String
  super_capacity: Float
  gazoil_capacity: Float
  super_quantity: Float
  gazoil_quantity: Float
  theorical_super_quantity: Float
  theorical_gazoil_quantity: Float
  reserve_super_quantity: Float
  reserve_gazoil_quantity: Float
  theorical_reserve_super_quantity: Float
  theorical_reserve_gazoil_quantity: Float
  bons: HoldsOnBonsUpdateManyWithoutHoldInput
  cars: CarUpdateManyWithoutHoldInput
  dotations: DotationUpdateManyWithoutHoldInput
}

input HoldUpsertWithoutBonsInput {
  update: HoldUpdateWithoutBonsDataInput!
  create: HoldCreateWithoutBonsInput!
}

input HoldUpsertWithoutCarsInput {
  update: HoldUpdateWithoutCarsDataInput!
  create: HoldCreateWithoutCarsInput!
}

input HoldUpsertWithoutDotationsInput {
  update: HoldUpdateWithoutDotationsDataInput!
  create: HoldCreateWithoutDotationsInput!
}

input HoldUpsertWithoutUsersInput {
  update: HoldUpdateWithoutUsersDataInput!
  create: HoldCreateWithoutUsersInput!
}

input HoldWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  localisation: String
  localisation_not: String
  localisation_in: [String!]
  localisation_not_in: [String!]
  localisation_lt: String
  localisation_lte: String
  localisation_gt: String
  localisation_gte: String
  localisation_contains: String
  localisation_not_contains: String
  localisation_starts_with: String
  localisation_not_starts_with: String
  localisation_ends_with: String
  localisation_not_ends_with: String
  super_capacity: Float
  super_capacity_not: Float
  super_capacity_in: [Float!]
  super_capacity_not_in: [Float!]
  super_capacity_lt: Float
  super_capacity_lte: Float
  super_capacity_gt: Float
  super_capacity_gte: Float
  gazoil_capacity: Float
  gazoil_capacity_not: Float
  gazoil_capacity_in: [Float!]
  gazoil_capacity_not_in: [Float!]
  gazoil_capacity_lt: Float
  gazoil_capacity_lte: Float
  gazoil_capacity_gt: Float
  gazoil_capacity_gte: Float
  super_quantity: Float
  super_quantity_not: Float
  super_quantity_in: [Float!]
  super_quantity_not_in: [Float!]
  super_quantity_lt: Float
  super_quantity_lte: Float
  super_quantity_gt: Float
  super_quantity_gte: Float
  gazoil_quantity: Float
  gazoil_quantity_not: Float
  gazoil_quantity_in: [Float!]
  gazoil_quantity_not_in: [Float!]
  gazoil_quantity_lt: Float
  gazoil_quantity_lte: Float
  gazoil_quantity_gt: Float
  gazoil_quantity_gte: Float
  theorical_super_quantity: Float
  theorical_super_quantity_not: Float
  theorical_super_quantity_in: [Float!]
  theorical_super_quantity_not_in: [Float!]
  theorical_super_quantity_lt: Float
  theorical_super_quantity_lte: Float
  theorical_super_quantity_gt: Float
  theorical_super_quantity_gte: Float
  theorical_gazoil_quantity: Float
  theorical_gazoil_quantity_not: Float
  theorical_gazoil_quantity_in: [Float!]
  theorical_gazoil_quantity_not_in: [Float!]
  theorical_gazoil_quantity_lt: Float
  theorical_gazoil_quantity_lte: Float
  theorical_gazoil_quantity_gt: Float
  theorical_gazoil_quantity_gte: Float
  reserve_super_quantity: Float
  reserve_super_quantity_not: Float
  reserve_super_quantity_in: [Float!]
  reserve_super_quantity_not_in: [Float!]
  reserve_super_quantity_lt: Float
  reserve_super_quantity_lte: Float
  reserve_super_quantity_gt: Float
  reserve_super_quantity_gte: Float
  reserve_gazoil_quantity: Float
  reserve_gazoil_quantity_not: Float
  reserve_gazoil_quantity_in: [Float!]
  reserve_gazoil_quantity_not_in: [Float!]
  reserve_gazoil_quantity_lt: Float
  reserve_gazoil_quantity_lte: Float
  reserve_gazoil_quantity_gt: Float
  reserve_gazoil_quantity_gte: Float
  theorical_reserve_super_quantity: Float
  theorical_reserve_super_quantity_not: Float
  theorical_reserve_super_quantity_in: [Float!]
  theorical_reserve_super_quantity_not_in: [Float!]
  theorical_reserve_super_quantity_lt: Float
  theorical_reserve_super_quantity_lte: Float
  theorical_reserve_super_quantity_gt: Float
  theorical_reserve_super_quantity_gte: Float
  theorical_reserve_gazoil_quantity: Float
  theorical_reserve_gazoil_quantity_not: Float
  theorical_reserve_gazoil_quantity_in: [Float!]
  theorical_reserve_gazoil_quantity_not_in: [Float!]
  theorical_reserve_gazoil_quantity_lt: Float
  theorical_reserve_gazoil_quantity_lte: Float
  theorical_reserve_gazoil_quantity_gt: Float
  theorical_reserve_gazoil_quantity_gte: Float
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  bons_every: HoldsOnBonsWhereInput
  bons_some: HoldsOnBonsWhereInput
  bons_none: HoldsOnBonsWhereInput
  cars_every: CarWhereInput
  cars_some: CarWhereInput
  cars_none: CarWhereInput
  dotations_every: DotationWhereInput
  dotations_some: DotationWhereInput
  dotations_none: DotationWhereInput
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [HoldWhereInput!]
  OR: [HoldWhereInput!]
  NOT: [HoldWhereInput!]
}

input HoldWhereUniqueInput {
  id: ID
}

type Log {
  id: ID!
  action: String!
  user: User!
  created_at: DateTime!
}

type LogConnection {
  pageInfo: PageInfo!
  edges: [LogEdge]!
  aggregate: AggregateLog!
}

input LogCreateInput {
  id: ID
  action: String!
  user: UserCreateOneWithoutLogsInput!
}

input LogCreateManyWithoutUserInput {
  create: [LogCreateWithoutUserInput!]
  connect: [LogWhereUniqueInput!]
}

input LogCreateWithoutUserInput {
  id: ID
  action: String!
}

type LogEdge {
  node: Log!
  cursor: String!
}

enum LogOrderByInput {
  id_ASC
  id_DESC
  action_ASC
  action_DESC
  created_at_ASC
  created_at_DESC
}

type LogPreviousValues {
  id: ID!
  action: String!
  created_at: DateTime!
}

input LogScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  action: String
  action_not: String
  action_in: [String!]
  action_not_in: [String!]
  action_lt: String
  action_lte: String
  action_gt: String
  action_gte: String
  action_contains: String
  action_not_contains: String
  action_starts_with: String
  action_not_starts_with: String
  action_ends_with: String
  action_not_ends_with: String
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [LogScalarWhereInput!]
  OR: [LogScalarWhereInput!]
  NOT: [LogScalarWhereInput!]
}

type LogSubscriptionPayload {
  mutation: MutationType!
  node: Log
  updatedFields: [String!]
  previousValues: LogPreviousValues
}

input LogSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LogWhereInput
  AND: [LogSubscriptionWhereInput!]
  OR: [LogSubscriptionWhereInput!]
  NOT: [LogSubscriptionWhereInput!]
}

input LogUpdateInput {
  action: String
  user: UserUpdateOneRequiredWithoutLogsInput
}

input LogUpdateManyDataInput {
  action: String
}

input LogUpdateManyMutationInput {
  action: String
}

input LogUpdateManyWithoutUserInput {
  create: [LogCreateWithoutUserInput!]
  delete: [LogWhereUniqueInput!]
  connect: [LogWhereUniqueInput!]
  set: [LogWhereUniqueInput!]
  disconnect: [LogWhereUniqueInput!]
  update: [LogUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LogUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LogScalarWhereInput!]
  updateMany: [LogUpdateManyWithWhereNestedInput!]
}

input LogUpdateManyWithWhereNestedInput {
  where: LogScalarWhereInput!
  data: LogUpdateManyDataInput!
}

input LogUpdateWithoutUserDataInput {
  action: String
}

input LogUpdateWithWhereUniqueWithoutUserInput {
  where: LogWhereUniqueInput!
  data: LogUpdateWithoutUserDataInput!
}

input LogUpsertWithWhereUniqueWithoutUserInput {
  where: LogWhereUniqueInput!
  update: LogUpdateWithoutUserDataInput!
  create: LogCreateWithoutUserInput!
}

input LogWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  action: String
  action_not: String
  action_in: [String!]
  action_not_in: [String!]
  action_lt: String
  action_lte: String
  action_gt: String
  action_gte: String
  action_contains: String
  action_not_contains: String
  action_starts_with: String
  action_not_starts_with: String
  action_ends_with: String
  action_not_ends_with: String
  user: UserWhereInput
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [LogWhereInput!]
  OR: [LogWhereInput!]
  NOT: [LogWhereInput!]
}

input LogWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBon(data: BonCreateInput!): Bon!
  updateBon(data: BonUpdateInput!, where: BonWhereUniqueInput!): Bon
  updateManyBons(data: BonUpdateManyMutationInput!, where: BonWhereInput): BatchPayload!
  upsertBon(where: BonWhereUniqueInput!, create: BonCreateInput!, update: BonUpdateInput!): Bon!
  deleteBon(where: BonWhereUniqueInput!): Bon
  deleteManyBons(where: BonWhereInput): BatchPayload!
  createCar(data: CarCreateInput!): Car!
  updateCar(data: CarUpdateInput!, where: CarWhereUniqueInput!): Car
  updateManyCars(data: CarUpdateManyMutationInput!, where: CarWhereInput): BatchPayload!
  upsertCar(where: CarWhereUniqueInput!, create: CarCreateInput!, update: CarUpdateInput!): Car!
  deleteCar(where: CarWhereUniqueInput!): Car
  deleteManyCars(where: CarWhereInput): BatchPayload!
  createDotation(data: DotationCreateInput!): Dotation!
  updateDotation(data: DotationUpdateInput!, where: DotationWhereUniqueInput!): Dotation
  updateManyDotations(data: DotationUpdateManyMutationInput!, where: DotationWhereInput): BatchPayload!
  upsertDotation(where: DotationWhereUniqueInput!, create: DotationCreateInput!, update: DotationUpdateInput!): Dotation!
  deleteDotation(where: DotationWhereUniqueInput!): Dotation
  deleteManyDotations(where: DotationWhereInput): BatchPayload!
  createDotationEmetteur(data: DotationEmetteurCreateInput!): DotationEmetteur!
  updateDotationEmetteur(data: DotationEmetteurUpdateInput!, where: DotationEmetteurWhereUniqueInput!): DotationEmetteur
  updateManyDotationEmetteurs(data: DotationEmetteurUpdateManyMutationInput!, where: DotationEmetteurWhereInput): BatchPayload!
  upsertDotationEmetteur(where: DotationEmetteurWhereUniqueInput!, create: DotationEmetteurCreateInput!, update: DotationEmetteurUpdateInput!): DotationEmetteur!
  deleteDotationEmetteur(where: DotationEmetteurWhereUniqueInput!): DotationEmetteur
  deleteManyDotationEmetteurs(where: DotationEmetteurWhereInput): BatchPayload!
  createHold(data: HoldCreateInput!): Hold!
  updateHold(data: HoldUpdateInput!, where: HoldWhereUniqueInput!): Hold
  updateManyHolds(data: HoldUpdateManyMutationInput!, where: HoldWhereInput): BatchPayload!
  upsertHold(where: HoldWhereUniqueInput!, create: HoldCreateInput!, update: HoldUpdateInput!): Hold!
  deleteHold(where: HoldWhereUniqueInput!): Hold
  deleteManyHolds(where: HoldWhereInput): BatchPayload!
  createHoldsOnBons(data: HoldsOnBonsCreateInput!): HoldsOnBons!
  updateHoldsOnBons(data: HoldsOnBonsUpdateInput!, where: HoldsOnBonsWhereUniqueInput!): HoldsOnBons
  upsertHoldsOnBons(where: HoldsOnBonsWhereUniqueInput!, create: HoldsOnBonsCreateInput!, update: HoldsOnBonsUpdateInput!): HoldsOnBons!
  deleteHoldsOnBons(where: HoldsOnBonsWhereUniqueInput!): HoldsOnBons
  deleteManyHoldsOnBonses(where: HoldsOnBonsWhereInput): BatchPayload!
  createLog(data: LogCreateInput!): Log!
  updateLog(data: LogUpdateInput!, where: LogWhereUniqueInput!): Log
  updateManyLogs(data: LogUpdateManyMutationInput!, where: LogWhereInput): BatchPayload!
  upsertLog(where: LogWhereUniqueInput!, create: LogCreateInput!, update: LogUpdateInput!): Log!
  deleteLog(where: LogWhereUniqueInput!): Log
  deleteManyLogs(where: LogWhereInput): BatchPayload!
  createNotification(data: NotificationCreateInput!): Notification!
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notification {
  id: ID!
  user: User!
  message: String!
  created_at: DateTime!
}

type NotificationConnection {
  pageInfo: PageInfo!
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  id: ID
  user: UserCreateOneWithoutNotificationsInput!
  message: String!
}

input NotificationCreateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateWithoutUserInput {
  id: ID
  message: String!
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  message_ASC
  message_DESC
  created_at_ASC
  created_at_DESC
}

type NotificationPreviousValues {
  id: ID!
  message: String!
  created_at: DateTime!
}

input NotificationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
  AND: [NotificationSubscriptionWhereInput!]
  OR: [NotificationSubscriptionWhereInput!]
  NOT: [NotificationSubscriptionWhereInput!]
}

input NotificationUpdateInput {
  user: UserUpdateOneRequiredWithoutNotificationsInput
  message: String
}

input NotificationUpdateManyDataInput {
  message: String
}

input NotificationUpdateManyMutationInput {
  message: String
}

input NotificationUpdateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput!]
  delete: [NotificationWhereUniqueInput!]
  connect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [NotificationScalarWhereInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
}

input NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput!
  data: NotificationUpdateManyDataInput!
}

input NotificationUpdateWithoutUserDataInput {
  message: String
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutUserDataInput!
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutUserDataInput!
  create: NotificationCreateWithoutUserInput!
}

input NotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
}

input NotificationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  bon(where: BonWhereUniqueInput!): Bon
  bons(where: BonWhereInput, orderBy: BonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bon]!
  bonsConnection(where: BonWhereInput, orderBy: BonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BonConnection!
  car(where: CarWhereUniqueInput!): Car
  cars(where: CarWhereInput, orderBy: CarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Car]!
  carsConnection(where: CarWhereInput, orderBy: CarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CarConnection!
  dotation(where: DotationWhereUniqueInput!): Dotation
  dotations(where: DotationWhereInput, orderBy: DotationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dotation]!
  dotationsConnection(where: DotationWhereInput, orderBy: DotationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DotationConnection!
  dotationEmetteur(where: DotationEmetteurWhereUniqueInput!): DotationEmetteur
  dotationEmetteurs(where: DotationEmetteurWhereInput, orderBy: DotationEmetteurOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DotationEmetteur]!
  dotationEmetteursConnection(where: DotationEmetteurWhereInput, orderBy: DotationEmetteurOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DotationEmetteurConnection!
  hold(where: HoldWhereUniqueInput!): Hold
  holds(where: HoldWhereInput, orderBy: HoldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hold]!
  holdsConnection(where: HoldWhereInput, orderBy: HoldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HoldConnection!
  holdsOnBons(where: HoldsOnBonsWhereUniqueInput!): HoldsOnBons
  holdsOnBonses(where: HoldsOnBonsWhereInput, orderBy: HoldsOnBonsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HoldsOnBons]!
  holdsOnBonsesConnection(where: HoldsOnBonsWhereInput, orderBy: HoldsOnBonsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HoldsOnBonsConnection!
  log(where: LogWhereUniqueInput!): Log
  logs(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Log]!
  logsConnection(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LogConnection!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  bon(where: BonSubscriptionWhereInput): BonSubscriptionPayload
  car(where: CarSubscriptionWhereInput): CarSubscriptionPayload
  dotation(where: DotationSubscriptionWhereInput): DotationSubscriptionPayload
  dotationEmetteur(where: DotationEmetteurSubscriptionWhereInput): DotationEmetteurSubscriptionPayload
  hold(where: HoldSubscriptionWhereInput): HoldSubscriptionPayload
  holdsOnBons(where: HoldsOnBonsSubscriptionWhereInput): HoldsOnBonsSubscriptionPayload
  log(where: LogSubscriptionWhereInput): LogSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  active: Boolean!
  grade: String!
  matricule: String!
  username: String!
  fullname: String!
  phone: String!
  super: Float!
  gazoil: Float!
  role: String!
  password: String!
  logs(where: LogWhereInput, orderBy: LogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Log!]
  bons(where: BonWhereInput, orderBy: BonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bon!]
  dotations(where: DotationWhereInput, orderBy: DotationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Dotation!]
  dotationEmetteurs(where: DotationEmetteurWhereInput, orderBy: DotationEmetteurOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DotationEmetteur!]
  hold: Hold
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  created_at: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  active: Boolean!
  grade: String!
  matricule: String!
  username: String!
  fullname: String!
  phone: String!
  super: Float!
  gazoil: Float!
  role: String!
  password: String!
  logs: LogCreateManyWithoutUserInput
  bons: BonCreateManyWithoutUserInput
  dotations: DotationCreateManyWithoutUserInput
  dotationEmetteurs: DotationEmetteurCreateManyWithoutUserInput
  hold: HoldCreateOneWithoutUsersInput
  notifications: NotificationCreateManyWithoutUserInput
}

input UserCreateManyWithoutHoldInput {
  create: [UserCreateWithoutHoldInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutBonsInput {
  create: UserCreateWithoutBonsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDotationEmetteursInput {
  create: UserCreateWithoutDotationEmetteursInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDotationsInput {
  create: UserCreateWithoutDotationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLogsInput {
  create: UserCreateWithoutLogsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBonsInput {
  id: ID
  active: Boolean!
  grade: String!
  matricule: String!
  username: String!
  fullname: String!
  phone: String!
  super: Float!
  gazoil: Float!
  role: String!
  password: String!
  logs: LogCreateManyWithoutUserInput
  dotations: DotationCreateManyWithoutUserInput
  dotationEmetteurs: DotationEmetteurCreateManyWithoutUserInput
  hold: HoldCreateOneWithoutUsersInput
  notifications: NotificationCreateManyWithoutUserInput
}

input UserCreateWithoutDotationEmetteursInput {
  id: ID
  active: Boolean!
  grade: String!
  matricule: String!
  username: String!
  fullname: String!
  phone: String!
  super: Float!
  gazoil: Float!
  role: String!
  password: String!
  logs: LogCreateManyWithoutUserInput
  bons: BonCreateManyWithoutUserInput
  dotations: DotationCreateManyWithoutUserInput
  hold: HoldCreateOneWithoutUsersInput
  notifications: NotificationCreateManyWithoutUserInput
}

input UserCreateWithoutDotationsInput {
  id: ID
  active: Boolean!
  grade: String!
  matricule: String!
  username: String!
  fullname: String!
  phone: String!
  super: Float!
  gazoil: Float!
  role: String!
  password: String!
  logs: LogCreateManyWithoutUserInput
  bons: BonCreateManyWithoutUserInput
  dotationEmetteurs: DotationEmetteurCreateManyWithoutUserInput
  hold: HoldCreateOneWithoutUsersInput
  notifications: NotificationCreateManyWithoutUserInput
}

input UserCreateWithoutHoldInput {
  id: ID
  active: Boolean!
  grade: String!
  matricule: String!
  username: String!
  fullname: String!
  phone: String!
  super: Float!
  gazoil: Float!
  role: String!
  password: String!
  logs: LogCreateManyWithoutUserInput
  bons: BonCreateManyWithoutUserInput
  dotations: DotationCreateManyWithoutUserInput
  dotationEmetteurs: DotationEmetteurCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutUserInput
}

input UserCreateWithoutLogsInput {
  id: ID
  active: Boolean!
  grade: String!
  matricule: String!
  username: String!
  fullname: String!
  phone: String!
  super: Float!
  gazoil: Float!
  role: String!
  password: String!
  bons: BonCreateManyWithoutUserInput
  dotations: DotationCreateManyWithoutUserInput
  dotationEmetteurs: DotationEmetteurCreateManyWithoutUserInput
  hold: HoldCreateOneWithoutUsersInput
  notifications: NotificationCreateManyWithoutUserInput
}

input UserCreateWithoutNotificationsInput {
  id: ID
  active: Boolean!
  grade: String!
  matricule: String!
  username: String!
  fullname: String!
  phone: String!
  super: Float!
  gazoil: Float!
  role: String!
  password: String!
  logs: LogCreateManyWithoutUserInput
  bons: BonCreateManyWithoutUserInput
  dotations: DotationCreateManyWithoutUserInput
  dotationEmetteurs: DotationEmetteurCreateManyWithoutUserInput
  hold: HoldCreateOneWithoutUsersInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  active_ASC
  active_DESC
  grade_ASC
  grade_DESC
  matricule_ASC
  matricule_DESC
  username_ASC
  username_DESC
  fullname_ASC
  fullname_DESC
  phone_ASC
  phone_DESC
  super_ASC
  super_DESC
  gazoil_ASC
  gazoil_DESC
  role_ASC
  role_DESC
  password_ASC
  password_DESC
  created_at_ASC
  created_at_DESC
}

type UserPreviousValues {
  id: ID!
  active: Boolean!
  grade: String!
  matricule: String!
  username: String!
  fullname: String!
  phone: String!
  super: Float!
  gazoil: Float!
  role: String!
  password: String!
  created_at: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  active: Boolean
  active_not: Boolean
  grade: String
  grade_not: String
  grade_in: [String!]
  grade_not_in: [String!]
  grade_lt: String
  grade_lte: String
  grade_gt: String
  grade_gte: String
  grade_contains: String
  grade_not_contains: String
  grade_starts_with: String
  grade_not_starts_with: String
  grade_ends_with: String
  grade_not_ends_with: String
  matricule: String
  matricule_not: String
  matricule_in: [String!]
  matricule_not_in: [String!]
  matricule_lt: String
  matricule_lte: String
  matricule_gt: String
  matricule_gte: String
  matricule_contains: String
  matricule_not_contains: String
  matricule_starts_with: String
  matricule_not_starts_with: String
  matricule_ends_with: String
  matricule_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  fullname: String
  fullname_not: String
  fullname_in: [String!]
  fullname_not_in: [String!]
  fullname_lt: String
  fullname_lte: String
  fullname_gt: String
  fullname_gte: String
  fullname_contains: String
  fullname_not_contains: String
  fullname_starts_with: String
  fullname_not_starts_with: String
  fullname_ends_with: String
  fullname_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  super: Float
  super_not: Float
  super_in: [Float!]
  super_not_in: [Float!]
  super_lt: Float
  super_lte: Float
  super_gt: Float
  super_gte: Float
  gazoil: Float
  gazoil_not: Float
  gazoil_in: [Float!]
  gazoil_not_in: [Float!]
  gazoil_lt: Float
  gazoil_lte: Float
  gazoil_gt: Float
  gazoil_gte: Float
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  active: Boolean
  grade: String
  matricule: String
  username: String
  fullname: String
  phone: String
  super: Float
  gazoil: Float
  role: String
  password: String
  logs: LogUpdateManyWithoutUserInput
  bons: BonUpdateManyWithoutUserInput
  dotations: DotationUpdateManyWithoutUserInput
  dotationEmetteurs: DotationEmetteurUpdateManyWithoutUserInput
  hold: HoldUpdateOneWithoutUsersInput
  notifications: NotificationUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  active: Boolean
  grade: String
  matricule: String
  username: String
  fullname: String
  phone: String
  super: Float
  gazoil: Float
  role: String
  password: String
}

input UserUpdateManyMutationInput {
  active: Boolean
  grade: String
  matricule: String
  username: String
  fullname: String
  phone: String
  super: Float
  gazoil: Float
  role: String
  password: String
}

input UserUpdateManyWithoutHoldInput {
  create: [UserCreateWithoutHoldInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutHoldInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutHoldInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutBonsInput {
  create: UserCreateWithoutBonsInput
  update: UserUpdateWithoutBonsDataInput
  upsert: UserUpsertWithoutBonsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutDotationEmetteursInput {
  create: UserCreateWithoutDotationEmetteursInput
  update: UserUpdateWithoutDotationEmetteursDataInput
  upsert: UserUpsertWithoutDotationEmetteursInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLogsInput {
  create: UserCreateWithoutLogsInput
  update: UserUpdateWithoutLogsDataInput
  upsert: UserUpsertWithoutLogsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  update: UserUpdateWithoutNotificationsDataInput
  upsert: UserUpsertWithoutNotificationsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutDotationsInput {
  create: UserCreateWithoutDotationsInput
  update: UserUpdateWithoutDotationsDataInput
  upsert: UserUpsertWithoutDotationsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBonsDataInput {
  active: Boolean
  grade: String
  matricule: String
  username: String
  fullname: String
  phone: String
  super: Float
  gazoil: Float
  role: String
  password: String
  logs: LogUpdateManyWithoutUserInput
  dotations: DotationUpdateManyWithoutUserInput
  dotationEmetteurs: DotationEmetteurUpdateManyWithoutUserInput
  hold: HoldUpdateOneWithoutUsersInput
  notifications: NotificationUpdateManyWithoutUserInput
}

input UserUpdateWithoutDotationEmetteursDataInput {
  active: Boolean
  grade: String
  matricule: String
  username: String
  fullname: String
  phone: String
  super: Float
  gazoil: Float
  role: String
  password: String
  logs: LogUpdateManyWithoutUserInput
  bons: BonUpdateManyWithoutUserInput
  dotations: DotationUpdateManyWithoutUserInput
  hold: HoldUpdateOneWithoutUsersInput
  notifications: NotificationUpdateManyWithoutUserInput
}

input UserUpdateWithoutDotationsDataInput {
  active: Boolean
  grade: String
  matricule: String
  username: String
  fullname: String
  phone: String
  super: Float
  gazoil: Float
  role: String
  password: String
  logs: LogUpdateManyWithoutUserInput
  bons: BonUpdateManyWithoutUserInput
  dotationEmetteurs: DotationEmetteurUpdateManyWithoutUserInput
  hold: HoldUpdateOneWithoutUsersInput
  notifications: NotificationUpdateManyWithoutUserInput
}

input UserUpdateWithoutHoldDataInput {
  active: Boolean
  grade: String
  matricule: String
  username: String
  fullname: String
  phone: String
  super: Float
  gazoil: Float
  role: String
  password: String
  logs: LogUpdateManyWithoutUserInput
  bons: BonUpdateManyWithoutUserInput
  dotations: DotationUpdateManyWithoutUserInput
  dotationEmetteurs: DotationEmetteurUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutUserInput
}

input UserUpdateWithoutLogsDataInput {
  active: Boolean
  grade: String
  matricule: String
  username: String
  fullname: String
  phone: String
  super: Float
  gazoil: Float
  role: String
  password: String
  bons: BonUpdateManyWithoutUserInput
  dotations: DotationUpdateManyWithoutUserInput
  dotationEmetteurs: DotationEmetteurUpdateManyWithoutUserInput
  hold: HoldUpdateOneWithoutUsersInput
  notifications: NotificationUpdateManyWithoutUserInput
}

input UserUpdateWithoutNotificationsDataInput {
  active: Boolean
  grade: String
  matricule: String
  username: String
  fullname: String
  phone: String
  super: Float
  gazoil: Float
  role: String
  password: String
  logs: LogUpdateManyWithoutUserInput
  bons: BonUpdateManyWithoutUserInput
  dotations: DotationUpdateManyWithoutUserInput
  dotationEmetteurs: DotationEmetteurUpdateManyWithoutUserInput
  hold: HoldUpdateOneWithoutUsersInput
}

input UserUpdateWithWhereUniqueWithoutHoldInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutHoldDataInput!
}

input UserUpsertWithoutBonsInput {
  update: UserUpdateWithoutBonsDataInput!
  create: UserCreateWithoutBonsInput!
}

input UserUpsertWithoutDotationEmetteursInput {
  update: UserUpdateWithoutDotationEmetteursDataInput!
  create: UserCreateWithoutDotationEmetteursInput!
}

input UserUpsertWithoutDotationsInput {
  update: UserUpdateWithoutDotationsDataInput!
  create: UserCreateWithoutDotationsInput!
}

input UserUpsertWithoutLogsInput {
  update: UserUpdateWithoutLogsDataInput!
  create: UserCreateWithoutLogsInput!
}

input UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput!
  create: UserCreateWithoutNotificationsInput!
}

input UserUpsertWithWhereUniqueWithoutHoldInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutHoldDataInput!
  create: UserCreateWithoutHoldInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  active: Boolean
  active_not: Boolean
  grade: String
  grade_not: String
  grade_in: [String!]
  grade_not_in: [String!]
  grade_lt: String
  grade_lte: String
  grade_gt: String
  grade_gte: String
  grade_contains: String
  grade_not_contains: String
  grade_starts_with: String
  grade_not_starts_with: String
  grade_ends_with: String
  grade_not_ends_with: String
  matricule: String
  matricule_not: String
  matricule_in: [String!]
  matricule_not_in: [String!]
  matricule_lt: String
  matricule_lte: String
  matricule_gt: String
  matricule_gte: String
  matricule_contains: String
  matricule_not_contains: String
  matricule_starts_with: String
  matricule_not_starts_with: String
  matricule_ends_with: String
  matricule_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  fullname: String
  fullname_not: String
  fullname_in: [String!]
  fullname_not_in: [String!]
  fullname_lt: String
  fullname_lte: String
  fullname_gt: String
  fullname_gte: String
  fullname_contains: String
  fullname_not_contains: String
  fullname_starts_with: String
  fullname_not_starts_with: String
  fullname_ends_with: String
  fullname_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  super: Float
  super_not: Float
  super_in: [Float!]
  super_not_in: [Float!]
  super_lt: Float
  super_lte: Float
  super_gt: Float
  super_gte: Float
  gazoil: Float
  gazoil_not: Float
  gazoil_in: [Float!]
  gazoil_not_in: [Float!]
  gazoil_lt: Float
  gazoil_lte: Float
  gazoil_gt: Float
  gazoil_gte: Float
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  logs_every: LogWhereInput
  logs_some: LogWhereInput
  logs_none: LogWhereInput
  bons_every: BonWhereInput
  bons_some: BonWhereInput
  bons_none: BonWhereInput
  dotations_every: DotationWhereInput
  dotations_some: DotationWhereInput
  dotations_none: DotationWhereInput
  dotationEmetteurs_every: DotationEmetteurWhereInput
  dotationEmetteurs_some: DotationEmetteurWhereInput
  dotationEmetteurs_none: DotationEmetteurWhereInput
  hold: HoldWhereInput
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  matricule: String
  phone: String
}
`
      }
    