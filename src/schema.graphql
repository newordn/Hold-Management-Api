const {GraphQLUpload} = require('graphql-upload')
const typeDefs = `
scalar Upload
type Query{
    info(message: String!): String!
    users: [User!]!
    logs: [Log!]!
    holds: [Hold!]!
    bons(consumed:Boolean!): [Bon!]!
    notifications(user: ID!): [Notification!]!
    cars: [Car!]!
    statistique(user:ID!, type: String!): [Statistique!]!
    emetteurs(hold:ID!): [User!]!
    exporting(type: String!): [Exporting!]!
    services: [Service!]!
    usersByService(service: ID!): [User!]!
}
   
type Mutation{  
    signUp(grade:String!,matricule:String!,username:String!,fullname:String!,phone:String!,role:String!, service: ID!): AuthPayload!
    signIn(phone:String!,service: ID!,password:String!): AuthPayload!
    hold(name:String!, localisation: String!, super_capacity: Float!, gazoil_capacity: Float!, super_cuves_number: Float!, gazoil_cuves_number: Float!): Hold!
    updateUsersHoldRole(user:ID!, hold: ID!, role: String!): User!
    dotateHold(user:ID!, hold:ID!, theorical_super_quantity: Float!, theorical_gazoil_quantity: Float!, theorical_reserve_super_quantity: Float!, theorical_reserve_gazoil_quantity: Float!, motif: String!, start_date: Float!, end_date: Float!): Hold!
    resetPassword(matricule: String!, password: String!): User!
    car(user: ID!, hold: ID!, image: Upload, marque: String!, capacity: Float!, type: String!, immatriculation: String!, kilometrage: Float!, service: ID!, number_of_reservoir: Float!): Car!
    bon(user: ID!,expiration_date: String!, driver: String,  departure: String, destination: String, fuel_type: String!, reason: String!, initial_number_of_liter: Float!,car: ID,holds: [ID!]!, reserve: Boolean!, type: Boolean!): Bon!
    transfertBon(from: ID!, to: ID!, number_of_liter: Float!, fuel_type: String!, motif: String!): User!
    consumedBon(user: ID!, bon: ID!,coverage_when_consuming: Float!, code: String!, number_of_liter_to_consume: Float!): ConsumedBon!
    dotateEmetteur(responsableSoute: ID!, user:ID!,start_date: Float!, end_date: Float!, number_of_liter_super: Float!, number_of_liter_gazoil: Float!, motif: String!): DotationEmetteur!
    service(label: String!, description: String!, hold: ID!): Service!
    dotateService(service: ID!, super: Float!, gazoil: Float!): Service!
}
type Service {
    id: ID!
    label: String!
    users: [User!]
    super: Float!
    gazoil: Float!
    hold: Hold!
    description: String
    created_at: String!
}
type DotationEmetteur{
    id: ID!
    motif: String!
    start_date: String!
    end_date: String!
    number_of_liter_super: Float!
    number_of_liter_gazoil: Float!
    user: User!
    created_at: String!
}
type Statistique{
    id: String!
    label: String!
    labels: [String!]!
    data: [Float!]!
}
type Exporting {
id: String!
label: String!
start_date: String!
end_date: String!
link: String!
}
type ConsumedBon{
message: String!
status: Boolean!
}
type AuthPayload{
    token: String!
    user: User!
}

type User{
   id: ID!
   active: Boolean!
   grade: String!
   matricule: String!
   username: String!
   fullname: String!
   phone: String!
   service: Service
   super: Float!
   gazoil: Float!
   reserve: Float!
   role: String!
   password: String!
   logs: [Log!]
   bons: [Bon!]
   dotations: [Dotation!]
   hold: Hold
   created_at: String!
}
type Dotation{
    id: ID!
    motif: String!
    start_date: String!
    end_date: String!
    number_of_liter_dotated: Float!
    number_of_liter_received: Float!
    user: User 
    hold: Hold 
    created_at: String!
}
type Log{
    id: ID!
    action: String!
    user: User!
    created_at: String!
}
type Hold{
    id: ID!
    name: String!
    localisation: String!
    super_capacity: Float!
    gazoil_capacity: Float!
    super_quantity: Float!
    gazoil_quantity: Float!
    super_cuves_number: Float!
    gazoil_cuves_number: Float!
    theorical_super_quantity: Float!
    theorical_gazoil_quantity: Float!
    reserve_super_quantity: Float!
    reserve_gazoil_quantity: Float!
    theorical_reserve_super_quantity: Float!
    theorical_reserve_gazoil_quantity: Float!
    users: [User!]
    bons: [HoldsOnBons!]
    cars: [Car!]
    dotations: [Dotation!]
    created_at: String!
}
type HoldsOnBons{
    id: ID!
    hold: Hold!
    bon: Bon!
    created_at: String!
}
type Bon{
    id: ID!
    driver: String
    expiration_date: String!
    consumed: Boolean!
    coverage_when_consuming: Float!
    consumed_date: String
    emission_date: String!
    departure: String
    destination: String
    fuel_type: String!
    reason: String!
    reserve: Boolean!
    number_of_liter: Float!
    code: String!
    initial_number_of_liter: Float!
    status: Boolean!
    user: User!
    car: Car
    type: Boolean!
    holds: [HoldsOnBons!]
    created_at: String!
}
type Car {
    id: ID!
    hold: Hold!
    image: String!
    marque: String!
    service: Service
    capacity: Float!
    type: String!
    bon: Bon
    number_of_reservoir: Float!
    immatriculation: String!
    kilometrage: Float!
    created_at: String
}
type Notification{
id : ID!
user: User!
message: String!
created_at: String!
}
`
module.exports ={
    typeDefs
}
